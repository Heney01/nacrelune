rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users: Publicly readable. Users can update their own data.
    // The server-side order transaction can update reward points.
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || (request.auth == null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rewardPoints']));
      allow delete: if false;

      // Likes on creators
      match /likes/{likerId} {
        allow read: if true;
        allow create, delete: if request.auth.uid == likerId;
      }
    }

    // Creations: Publicly readable. Creators can manage them.
    // The server-side order transaction can update sales count.
    match /creations/{creationId} {
      allow read: if true;
      allow create: if request.auth.uid == request.resource.data.creatorId;
      allow update: if (request.auth.uid == resource.data.creatorId) || 
                      (request.auth == null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['salesCount']));
      allow delete: if request.auth.uid == resource.data.creatorId;
      
      // Likes on creations
      match /likes/{userId} {
        allow read: if true;
        allow create, delete: if request.auth.uid == userId;
      }
    }

    // --- Read-only collections for clients ---
    // The server-side order transaction can update quantity on these.
    function canUpdateStock() {
      return request.auth == null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['quantity']);
    }

    match /necklace/{docId} {
      allow read: if true;
      allow write: if canUpdateStock();
    }
    match /bracelet/{docId} {
      allow read: if true;
      allow write: if canUpdateStock();
    }
    match /earring/{docId} {
      allow read: if true;
      allow write: if canUpdateStock();
    }
    match /charms/{charmId} {
      allow read: if true;
      allow write: if canUpdateStock();
    }
    match /charmCategories/{categoryId} {
      allow read: if true;
      allow write: if false;
    }
    match /preferences/general {
      allow read: if true;
      allow write: if false;
    }
    match /coupons/{couponId} {
      allow read: if true;
      allow write: if false;
    }

    // Orders: Writable by anyone (server-side action handles validation). Not updatable/deletable from client.
    match /orders/{orderId} {
      allow read: if false; // Should only be read via server actions for security.
      allow create: if true;
      allow update, delete: if false;
    }
    
    // Mail: Write-only for server-side actions.
    match /mail/{mailId} {
      allow read: if false;
      allow create: if true;
      allow update, delete: if false;
    }
  }
}